/*******************************************************************************
* generated by lcd-image-converter
* font
* filename: Z:/Windows 10 VM/programmable-load/fonts/Numbers_L.xml
* name: Numbers_L
* family: Bahnschrift
* size: 20
* style: Normal
* included characters:  %,.0123456789ACMVWkms°µΩ※
* antialiasing: yes
* type: proportional
* encoding: UTF-16
* unicode bom: no
*
* preset name: Grayscale 4
* data block size: 8 bit(s), uint8_t
* RLE compression enabled: no
* conversion type: Grayscale, not_used not_used
* split to rows: yes
* bits per pixel: 4
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/

#include <stdint.h>
#include <etl/array.h>

#include "Gfx/Font.h"



// Storage and visibility attributes for glyphs
#define GLYPH_STORAGE __attribute__((section(".gfxdata.glyphs")))\
    __attribute__((visibility("hidden")))
// Storage and visibility attributes for character descriptors
#define CHARDEF_STORAGE __attribute__((section(".gfxdata.chardef")))\
    __attribute__((visibility("hidden")))

///////////////////////////////////////////////////////////////////////////////////////////////////
// Character data
///////////////////////////////////////////////////////////////////////////////////////////////////

//-----------------------
// Character:   (codepoint 0020)
// Size: 5 x 24
// ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
    // ∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 72>
    image_data_Numbers_L_0x0020 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00
}};

//-----------------------
// Character: % (codepoint 0025)
// Size: 13 x 24
// ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙░░∙∙∙∙∙∙∙∙∙
    // ∙▓███∙∙∙░█░∙∙
    // ░█▒░█▒∙∙▓▓∙∙∙
    // ░█▒░█▒∙░█░∙∙∙
    // ░█▒░█▒∙▓█∙∙∙∙
    // ∙█▓▓█░░█▒∙∙∙∙
    // ∙░██▒∙▓█∙∙∙∙∙
    // ∙∙∙∙∙░█▒∙∙∙∙∙
    // ∙∙∙∙∙▓█∙∙∙∙∙∙
    // ∙∙∙∙░█▒∙▓██▒∙
    // ∙∙∙∙▓█∙▒█░▓█∙
    // ∙∙∙░█▒∙▒█∙▒█∙
    // ∙∙∙▓█∙∙▒█∙▒█∙
    // ∙∙░█▒∙∙▒█░▓█∙
    // ∙∙▓█∙∙∙∙███▒∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 168>
    image_data_Numbers_L_0x0025 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x45, 0x00, 0x00, 0x02, 0x10, 0x00, 
    0x0a, 0xff, 0xe2, 0x00, 0x4f, 0x40, 0x00, 
    0x3f, 0x73, 0xf7, 0x00, 0xcc, 0x00, 0x00, 
    0x3f, 0x73, 0xf7, 0x04, 0xf4, 0x00, 0x00, 
    0x3f, 0x73, 0xf7, 0x0c, 0xd1, 0x00, 0x00, 
    0x0e, 0xca, 0xf4, 0x4f, 0x70, 0x00, 0x00, 
    0x04, 0xdd, 0x80, 0xad, 0x10, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0xf7, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x0a, 0xd1, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x3f, 0x70, 0xcf, 0xf7, 0x00, 
    0x00, 0x00, 0xad, 0x17, 0xf5, 0xbd, 0x10, 
    0x00, 0x03, 0xf7, 0x07, 0xd1, 0x7d, 0x10, 
    0x00, 0x0a, 0xd1, 0x07, 0xd1, 0x7d, 0x10, 
    0x00, 0x3f, 0x70, 0x07, 0xf4, 0xad, 0x10, 
    0x00, 0xad, 0x10, 0x00, 0xdf, 0xf7, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: , (codepoint 002c)
// Size: 4 x 24
// ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙█▓∙
    // ∙██∙
    // ∙██∙
    // ∙█▒∙
    // ∙▒∙∙
    // ∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 48>
    image_data_Numbers_L_0x002c GLYPH_STORAGE {{
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x0c, 0xb1, 
    0x0e, 0xd1, 
    0x0e, 0xd1, 
    0x0e, 0x70, 
    0x08, 0x00, 
    0x00, 0x00
}};

//-----------------------
// Character: . (codepoint 002e)
// Size: 4 x 24
// ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙█▓∙
    // ∙██∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
    // ∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 48>
    image_data_Numbers_L_0x002e GLYPH_STORAGE {{
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x0c, 0xb1, 
    0x0e, 0xd1, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00
}};

//-----------------------
// Character: 0 (codepoint 0030)
// Size: 10 x 24
// ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙▒░∙∙∙∙
    // ∙∙▓████▒∙∙
    // ∙▒█▓░░██░∙
    // ∙▓█∙∙∙░█▒∙
    // ∙▓█∙∙∙░█▓∙
    // ∙▓█∙∙∙░█▓∙
    // ∙▓█∙∙∙░█▓∙
    // ∙▓█∙∙∙░█▓∙
    // ∙▓█∙∙∙░█▓∙
    // ∙▓█∙∙∙░█▓∙
    // ∙▓█∙∙∙░█▓∙
    // ∙▓█∙∙∙░█▓∙
    // ∙▓█∙∙∙░█▒∙
    // ∙░██▒▒██∙∙
    // ∙∙▒████░∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x0030 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x02, 0x65, 0x10, 0x00, 
    0x00, 0xaf, 0xff, 0xf8, 0x00, 
    0x07, 0xfb, 0x34, 0xdf, 0x40, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 
    0x0c, 0xd1, 0x00, 0x3f, 0x90, 
    0x0c, 0xd1, 0x00, 0x3f, 0x90, 
    0x0c, 0xd1, 0x00, 0x3f, 0x90, 
    0x0c, 0xd1, 0x00, 0x3f, 0x90, 
    0x0c, 0xd1, 0x00, 0x3f, 0x90, 
    0x0c, 0xd1, 0x00, 0x3f, 0x90, 
    0x0c, 0xd1, 0x00, 0x3f, 0x90, 
    0x0c, 0xd1, 0x00, 0x3f, 0x90, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 
    0x04, 0xfe, 0x78, 0xff, 0x20, 
    0x00, 0x7f, 0xff, 0xe4, 0x00, 
    0x00, 0x00, 0x21, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: 1 (codepoint 0031)
// Size: 6 x 24
// ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙░∙∙
    // ∙░██▓∙
    // ░█▓█▓∙
    // ░▒∙█▓∙
    // ∙∙∙█▓∙
    // ∙∙∙█▓∙
    // ∙∙∙█▓∙
    // ∙∙∙█▓∙
    // ∙∙∙█▓∙
    // ∙∙∙█▓∙
    // ∙∙∙█▓∙
    // ∙∙∙█▓∙
    // ∙∙∙█▓∙
    // ∙∙∙█▓∙
    // ∙∙∙█▓∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 72>
    image_data_Numbers_L_0x0031 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x03, 0x10, 
    0x06, 0xff, 0xc0, 
    0x4f, 0xcf, 0xc0, 
    0x46, 0x0e, 0xc0, 
    0x00, 0x0e, 0xc0, 
    0x00, 0x0e, 0xc0, 
    0x00, 0x0e, 0xc0, 
    0x00, 0x0e, 0xc0, 
    0x00, 0x0e, 0xc0, 
    0x00, 0x0e, 0xc0, 
    0x00, 0x0e, 0xc0, 
    0x00, 0x0e, 0xc0, 
    0x00, 0x0e, 0xc0, 
    0x00, 0x0e, 0xc0, 
    0x00, 0x0e, 0xc0, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00
}};

//-----------------------
// Character: 2 (codepoint 0032)
// Size: 9 x 24
// ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙▒░∙∙∙
    // ∙∙▓████░∙
    // ∙▒█▓░░██∙
    // ∙▓█∙∙∙▓█░
    // ∙▓▒∙∙∙▒█░
    // ∙∙∙∙∙∙▓█∙
    // ∙∙∙∙∙░█▓∙
    // ∙∙∙∙∙▓█░∙
    // ∙∙∙∙▒█▓∙∙
    // ∙∙∙░██∙∙∙
    // ∙∙∙▓█░∙∙∙
    // ∙∙▒█▓∙∙∙∙
    // ∙░██∙∙∙∙∙
    // ∙▓██▓▓▓▓░
    // ∙███████░
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x0032 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x02, 0x64, 0x00, 0x00, 
    0x00, 0xcf, 0xff, 0xf4, 0x00, 
    0x07, 0xfb, 0x36, 0xfd, 0x10, 
    0x0c, 0xd1, 0x00, 0xaf, 0x40, 
    0x0a, 0x80, 0x00, 0x7f, 0x40, 
    0x00, 0x00, 0x00, 0xcf, 0x20, 
    0x00, 0x00, 0x03, 0xfc, 0x00, 
    0x00, 0x00, 0x0c, 0xf4, 0x00, 
    0x00, 0x00, 0x7f, 0x90, 0x00, 
    0x00, 0x03, 0xfd, 0x10, 0x00, 
    0x00, 0x0c, 0xf4, 0x00, 0x00, 
    0x00, 0x7f, 0x90, 0x00, 0x00, 
    0x03, 0xfd, 0x10, 0x00, 0x00, 
    0x0c, 0xfd, 0xbb, 0xba, 0x40, 
    0x0e, 0xff, 0xff, 0xff, 0x40, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: 3 (codepoint 0033)
// Size: 9 x 24
// ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙▒∙∙∙∙
    // ∙∙█████∙∙
    // ∙▓█▓░▒█▓∙
    // ∙██∙∙∙▓█∙
    // ∙░░∙∙∙▓█∙
    // ∙∙∙∙∙∙▓█∙
    // ∙∙∙∙░░█▓∙
    // ∙∙∙░██▓∙∙
    // ∙∙∙∙▒▓█▓∙
    // ∙∙∙∙∙∙▓█∙
    // ∙∙∙∙∙∙▒█░
    // ∙▓▒∙∙∙▒█░
    // ░█▓∙∙∙▓█∙
    // ∙▓█▓▒▓█▓∙
    // ∙∙████▓∙∙
    // ∙∙∙∙░∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x0033 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x02, 0x63, 0x00, 0x00, 
    0x00, 0xdf, 0xff, 0xe2, 0x00, 
    0x0a, 0xfa, 0x38, 0xfc, 0x00, 
    0x0e, 0xd1, 0x00, 0xcd, 0x10, 
    0x05, 0x40, 0x00, 0xcd, 0x10, 
    0x00, 0x00, 0x00, 0xcd, 0x10, 
    0x00, 0x00, 0x36, 0xf9, 0x00, 
    0x00, 0x04, 0xff, 0xc0, 0x00, 
    0x00, 0x02, 0x6a, 0xf9, 0x00, 
    0x00, 0x00, 0x00, 0xaf, 0x20, 
    0x00, 0x00, 0x00, 0x7f, 0x40, 
    0x2a, 0x60, 0x00, 0x7f, 0x40, 
    0x3f, 0xc0, 0x00, 0xaf, 0x20, 
    0x0c, 0xfb, 0x7a, 0xfc, 0x00, 
    0x00, 0xdf, 0xff, 0xb1, 0x00, 
    0x00, 0x00, 0x30, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: 4 (codepoint 0034)
// Size: 10 x 24
// ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙░█▓∙∙∙
    // ∙∙∙∙▓█∙∙∙∙
    // ∙∙∙∙█▓∙∙∙∙
    // ∙∙∙░█▒∙∙∙∙
    // ∙∙∙▓█∙∙∙∙∙
    // ∙∙░█▓∙∙▒∙∙
    // ∙∙▒█▒∙▒█░∙
    // ∙∙▓█∙∙▒█░∙
    // ∙░█▓∙∙▒█░∙
    // ∙▓█░∙∙▒█░∙
    // ∙████████▒
    // ∙████████▒
    // ∙∙∙∙∙∙▒█░∙
    // ∙∙∙∙∙∙▒█░∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x0034 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x02, 0x10, 0x00, 
    0x00, 0x00, 0x4f, 0x90, 0x00, 
    0x00, 0x00, 0xaf, 0x20, 0x00, 
    0x00, 0x00, 0xec, 0x00, 0x00, 
    0x00, 0x04, 0xf7, 0x00, 0x00, 
    0x00, 0x0c, 0xf2, 0x00, 0x00, 
    0x00, 0x3f, 0xc0, 0x26, 0x10, 
    0x00, 0x7f, 0x70, 0x7f, 0x40, 
    0x00, 0xcd, 0x10, 0x7f, 0x40, 
    0x04, 0xf9, 0x00, 0x7f, 0x40, 
    0x0a, 0xf4, 0x00, 0x7f, 0x40, 
    0x0e, 0xfe, 0xdd, 0xff, 0xe7, 
    0x0c, 0xdd, 0xdd, 0xff, 0xe7, 
    0x00, 0x00, 0x00, 0x7f, 0x40, 
    0x00, 0x00, 0x00, 0x7f, 0x40, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: 5 (codepoint 0035)
// Size: 10 x 24
// ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙░░░░░∙∙∙
    // ∙▒██████∙∙
    // ∙▒█▒▒▒▒░∙∙
    // ∙▒█░∙∙∙∙∙∙
    // ∙▒█░∙∙∙∙∙∙
    // ∙▒█▒▓█▒∙∙∙
    // ∙▒█████▓∙∙
    // ∙▒█▓∙∙▓█░∙
    // ∙∙░∙∙∙░█▒∙
    // ∙∙∙∙∙∙░█▒∙
    // ∙∙∙∙∙∙░█▒∙
    // ∙░░∙∙∙░█▒∙
    // ∙▓█∙∙∙▒█░∙
    // ∙░██▒▓██∙∙
    // ∙∙▒████░∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x0035 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x33, 0x33, 0x33, 0x00, 
    0x07, 0xff, 0xff, 0xff, 0x20, 
    0x07, 0xf9, 0x66, 0x65, 0x10, 
    0x07, 0xf4, 0x00, 0x00, 0x00, 
    0x07, 0xf4, 0x00, 0x00, 0x00, 
    0x07, 0xf7, 0xad, 0x91, 0x00, 
    0x07, 0xff, 0xff, 0xfc, 0x00, 
    0x07, 0xf9, 0x00, 0xaf, 0x40, 
    0x00, 0x30, 0x00, 0x4f, 0x70, 
    0x00, 0x00, 0x00, 0x4f, 0x70, 
    0x00, 0x00, 0x00, 0x4f, 0x70, 
    0x05, 0x50, 0x00, 0x4f, 0x70, 
    0x0a, 0xf2, 0x00, 0x7f, 0x40, 
    0x04, 0xfe, 0x7a, 0xfd, 0x10, 
    0x00, 0x7f, 0xff, 0xe4, 0x00, 
    0x00, 0x00, 0x21, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: 6 (codepoint 0036)
// Size: 9 x 24
// ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙░∙∙∙
    // ∙∙∙∙▓█░∙∙
    // ∙∙∙░█▓∙∙∙
    // ∙∙∙▓█░∙∙∙
    // ∙∙░█▓∙∙∙∙
    // ∙∙▒█░∙∙∙∙
    // ∙∙██▒░∙∙∙
    // ∙▒█████░∙
    // ∙▓█▒░░██∙
    // ∙█▓∙∙∙▓█∙
    // ∙█▓∙∙∙▓█∙
    // ∙█▓∙∙∙▓█∙
    // ∙██∙∙∙▓█∙
    // ∙▓██▒██▓∙
    // ∙∙▓███▓∙∙
    // ∙∙∙∙░∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x0036 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0x00, 0x00, 
    0x00, 0x00, 0xaf, 0x40, 0x00, 
    0x00, 0x03, 0xfc, 0x00, 0x00, 
    0x00, 0x0a, 0xf4, 0x00, 0x00, 
    0x00, 0x3f, 0xc0, 0x00, 0x00, 
    0x00, 0x7f, 0x40, 0x00, 0x00, 
    0x00, 0xed, 0x65, 0x10, 0x00, 
    0x07, 0xff, 0xff, 0xf4, 0x00, 
    0x0c, 0xf7, 0x36, 0xfd, 0x10, 
    0x0e, 0xc0, 0x00, 0xaf, 0x20, 
    0x0e, 0xc0, 0x00, 0xaf, 0x20, 
    0x0e, 0xc0, 0x00, 0xaf, 0x20, 
    0x0e, 0xd1, 0x00, 0xcf, 0x20, 
    0x0a, 0xfd, 0x7c, 0xf9, 0x00, 
    0x00, 0xaf, 0xff, 0xb1, 0x00, 
    0x00, 0x00, 0x30, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: 7 (codepoint 0037)
// Size: 9 x 24
// ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙░░░░░░∙∙
    // ░███████∙
    // ░█▓▒▒▒██∙
    // ░█▓∙∙░█▓∙
    // ∙▒░∙∙▒█░∙
    // ∙∙∙∙∙▓█∙∙
    // ∙∙∙∙∙█▓∙∙
    // ∙∙∙∙░█▓∙∙
    // ∙∙∙∙▒█░∙∙
    // ∙∙∙∙▓█∙∙∙
    // ∙∙∙░█▓∙∙∙
    // ∙∙∙░█▒∙∙∙
    // ∙∙∙▓█∙∙∙∙
    // ∙∙∙██∙∙∙∙
    // ∙∙░█▓∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x0037 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x03, 0x33, 0x33, 0x33, 0x00, 
    0x3f, 0xff, 0xff, 0xfd, 0x10, 
    0x3f, 0xb6, 0x66, 0xfd, 0x10, 
    0x3f, 0x90, 0x03, 0xf9, 0x00, 
    0x06, 0x40, 0x07, 0xf4, 0x00, 
    0x00, 0x00, 0x0c, 0xf2, 0x00, 
    0x00, 0x00, 0x0e, 0xc0, 0x00, 
    0x00, 0x00, 0x4f, 0x90, 0x00, 
    0x00, 0x00, 0x7f, 0x40, 0x00, 
    0x00, 0x00, 0xcd, 0x10, 0x00, 
    0x00, 0x03, 0xfc, 0x00, 0x00, 
    0x00, 0x04, 0xf7, 0x00, 0x00, 
    0x00, 0x0a, 0xf2, 0x00, 0x00, 
    0x00, 0x0e, 0xd1, 0x00, 0x00, 
    0x00, 0x3f, 0x90, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: 8 (codepoint 0038)
// Size: 10 x 24
// ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙░░∙∙∙∙
    // ∙∙▓████▒∙∙
    // ∙░██░░██░∙
    // ∙▓█░∙∙░█▒∙
    // ∙▓█∙∙∙░█▒∙
    // ∙▓█∙∙∙░█▒∙
    // ∙░█▓░░▓█∙∙
    // ∙∙▒████░∙∙
    // ∙░██▒▒██∙∙
    // ∙▓█∙∙∙░█▓∙
    // ∙▓█∙∙∙∙█▓∙
    // ∙▓█∙∙∙∙█▓∙
    // ∙▓█∙∙∙░█▓∙
    // ∙▒██▒▒██░∙
    // ∙∙▒████▒∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x0038 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x54, 0x00, 0x00, 
    0x00, 0xaf, 0xff, 0xf7, 0x00, 
    0x04, 0xfd, 0x44, 0xef, 0x40, 
    0x0a, 0xf4, 0x00, 0x4f, 0x70, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 
    0x03, 0xfc, 0x34, 0xcf, 0x20, 
    0x00, 0x7f, 0xff, 0xf4, 0x00, 
    0x04, 0xfe, 0x78, 0xff, 0x20, 
    0x0c, 0xf2, 0x00, 0x3f, 0x90, 
    0x0c, 0xd1, 0x00, 0x0e, 0xc0, 
    0x0c, 0xd1, 0x00, 0x0e, 0xc0, 
    0x0c, 0xf2, 0x00, 0x3f, 0x90, 
    0x07, 0xfe, 0x78, 0xff, 0x40, 
    0x00, 0x7f, 0xff, 0xf7, 0x00, 
    0x00, 0x00, 0x21, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: 9 (codepoint 0039)
// Size: 9 x 24
// ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙▒∙∙∙∙
    // ∙∙█████∙∙
    // ∙▓█▓░▒█▓∙
    // ∙█▓∙∙∙▓█∙
    // ∙█▓∙∙∙▓█∙
    // ∙█▓∙∙∙▓█∙
    // ∙██∙∙∙▓█∙
    // ∙▓█▓▒▓█▓∙
    // ∙∙▓████▒∙
    // ∙∙∙∙░▓█∙∙
    // ∙∙∙∙░█▓∙∙
    // ∙∙∙∙▓█∙∙∙
    // ∙∙∙░█▓∙∙∙
    // ∙∙∙▓█░∙∙∙
    // ∙∙░█▓∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x0039 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x02, 0x63, 0x00, 0x00, 
    0x00, 0xdf, 0xff, 0xe2, 0x00, 
    0x0a, 0xfa, 0x38, 0xfc, 0x00, 
    0x0e, 0xc0, 0x00, 0xaf, 0x20, 
    0x0e, 0xc0, 0x00, 0xaf, 0x20, 
    0x0e, 0xc0, 0x00, 0xaf, 0x20, 
    0x0e, 0xd1, 0x00, 0xcf, 0x20, 
    0x0a, 0xfb, 0x6a, 0xfc, 0x00, 
    0x00, 0xcf, 0xff, 0xf7, 0x00, 
    0x00, 0x00, 0x3c, 0xf2, 0x00, 
    0x00, 0x00, 0x4f, 0x90, 0x00, 
    0x00, 0x00, 0xcf, 0x20, 0x00, 
    0x00, 0x03, 0xf9, 0x00, 0x00, 
    0x00, 0x0a, 0xf4, 0x00, 0x00, 
    0x00, 0x3f, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: A (codepoint 0041)
// Size: 11 x 24
// ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙░∙∙∙∙∙
    // ∙∙∙∙▓█▓∙∙∙∙
    // ∙∙∙∙▓██∙∙∙∙
    // ∙∙∙░█▓█░∙∙∙
    // ∙∙∙▒█░█▒∙∙∙
    // ∙∙∙▓█∙▓▓∙∙∙
    // ∙∙░█▓∙▓█∙∙∙
    // ∙∙░█░∙░█▒∙∙
    // ∙∙▓█∙∙∙█▓∙∙
    // ∙∙█▓∙∙∙▓█∙∙
    // ∙░███████░∙
    // ∙▓███████▓∙
    // ∙▓█∙∙∙∙∙██∙
    // ░█▓∙∙∙∙∙▓█░
    // ▒█▒∙∙∙∙∙░█▒
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 144>
    image_data_Numbers_L_0x0041 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xaf, 0x90, 0x00, 0x00, 
    0x00, 0x00, 0xcf, 0xd1, 0x00, 0x00, 
    0x00, 0x03, 0xfb, 0xf4, 0x00, 0x00, 
    0x00, 0x07, 0xf5, 0xf7, 0x00, 0x00, 
    0x00, 0x0c, 0xd1, 0xcc, 0x00, 0x00, 
    0x00, 0x3f, 0x90, 0xaf, 0x20, 0x00, 
    0x00, 0x4f, 0x40, 0x4f, 0x70, 0x00, 
    0x00, 0xaf, 0x20, 0x0e, 0xc0, 0x00, 
    0x00, 0xec, 0x00, 0x0c, 0xd1, 0x00, 
    0x04, 0xff, 0xdd, 0xdf, 0xf4, 0x00, 
    0x0a, 0xfe, 0xdd, 0xde, 0xf9, 0x00, 
    0x0c, 0xd1, 0x00, 0x00, 0xed, 0x10, 
    0x3f, 0x90, 0x00, 0x00, 0xaf, 0x40, 
    0x7f, 0x70, 0x00, 0x00, 0x4f, 0x70, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: C (codepoint 0043)
// Size: 10 x 24
// ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙░▒∙∙∙∙
    // ∙∙░█████∙∙
    // ∙░██▒░▓██∙
    // ∙▒█░∙∙∙▓█░
    // ∙▓█∙∙∙∙░█▒
    // ∙▓█∙∙∙∙∙∙∙
    // ∙▓█∙∙∙∙∙∙∙
    // ∙▓█∙∙∙∙∙∙∙
    // ∙▓█∙∙∙∙∙∙∙
    // ∙▓█∙∙∙∙∙∙∙
    // ∙▓█∙∙∙∙∙∙∙
    // ∙▓█∙∙∙∙░█▒
    // ∙▒█▒∙∙∙▓█░
    // ∙∙██▓▒██▓∙
    // ∙∙∙████▓∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x0043 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x46, 0x30, 0x00, 
    0x00, 0x4f, 0xff, 0xfe, 0x20, 
    0x03, 0xff, 0x63, 0xaf, 0xd1, 
    0x07, 0xf4, 0x00, 0x0a, 0xf4, 
    0x0c, 0xf2, 0x00, 0x04, 0xd7, 
    0x0c, 0xd1, 0x00, 0x00, 0x00, 
    0x0c, 0xd1, 0x00, 0x00, 0x00, 
    0x0c, 0xd1, 0x00, 0x00, 0x00, 
    0x0c, 0xd1, 0x00, 0x00, 0x00, 
    0x0c, 0xd1, 0x00, 0x00, 0x00, 
    0x0c, 0xd1, 0x00, 0x00, 0x00, 
    0x0a, 0xf2, 0x00, 0x04, 0xf7, 
    0x07, 0xf7, 0x00, 0x0a, 0xf4, 
    0x00, 0xef, 0xb6, 0xdf, 0xc0, 
    0x00, 0x2d, 0xff, 0xfb, 0x10, 
    0x00, 0x00, 0x03, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: M (codepoint 004d)
// Size: 13 x 24
// ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙▓█░∙∙∙∙∙∙▓█∙
    // ∙▓█▓∙∙∙∙∙░██∙
    // ∙▓██∙∙∙∙∙▓██∙
    // ∙▓██▒∙∙∙∙███∙
    // ∙▓███∙∙∙░█▓█∙
    // ∙▓█▒█░∙∙▓▓▓█∙
    // ∙▓█░█▓∙░█▒▓█∙
    // ∙▓█∙▓█∙▒█∙▓█∙
    // ∙▓█∙░█▒█▓∙▓█∙
    // ∙▓█∙∙▓██░∙▓█∙
    // ∙▓█∙∙▒██∙∙▓█∙
    // ∙▓█∙∙░█▓∙∙▓█∙
    // ∙▓█∙∙∙∙∙∙∙▓█∙
    // ∙▓█∙∙∙∙∙∙∙▓█∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 168>
    image_data_Numbers_L_0x004d GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x30, 0x00, 0x00, 0x00, 0x03, 0x00, 
    0x0a, 0xf4, 0x00, 0x00, 0x00, 0xcf, 0x20, 
    0x0a, 0xfc, 0x00, 0x00, 0x04, 0xff, 0x20, 
    0x0a, 0xff, 0x20, 0x00, 0x0a, 0xff, 0x20, 
    0x0a, 0xff, 0x70, 0x00, 0x0e, 0xff, 0x20, 
    0x0a, 0xfe, 0xd1, 0x00, 0x4f, 0xcf, 0x20, 
    0x0a, 0xf7, 0xf4, 0x00, 0xcc, 0xaf, 0x20, 
    0x0a, 0xf3, 0xe9, 0x03, 0xf7, 0xaf, 0x20, 
    0x0a, 0xf2, 0xad, 0x17, 0xf2, 0xaf, 0x20, 
    0x0a, 0xf2, 0x3f, 0x8e, 0x90, 0xaf, 0x20, 
    0x0a, 0xf2, 0x0c, 0xff, 0x40, 0xaf, 0x20, 
    0x0a, 0xf2, 0x07, 0xfd, 0x10, 0xaf, 0x20, 
    0x0a, 0xf2, 0x03, 0xf9, 0x00, 0xaf, 0x20, 
    0x0a, 0xf2, 0x00, 0x00, 0x00, 0xaf, 0x20, 
    0x0a, 0xf2, 0x00, 0x00, 0x00, 0xaf, 0x20, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: V (codepoint 0056)
// Size: 10 x 24
// ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙░∙
    // ▓█░∙∙∙∙░█▒
    // ░█▒∙∙∙∙▓█░
    // ∙█▓∙∙∙∙▓█∙
    // ∙▓█∙∙∙░█▓∙
    // ∙▒█░∙∙░█▒∙
    // ∙░█▒∙∙▓█∙∙
    // ∙∙█▓∙∙▓█∙∙
    // ∙∙▓█∙░█▓∙∙
    // ∙∙▒█░░█░∙∙
    // ∙∙░█▒▓█∙∙∙
    // ∙∙∙█▓▓▓∙∙∙
    // ∙∙∙▓██▓∙∙∙
    // ∙∙∙░██░∙∙∙
    // ∙∙∙░██∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x0056 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x23, 0x00, 0x00, 0x00, 0x31, 
    0xaf, 0x40, 0x00, 0x04, 0xf7, 
    0x4f, 0x70, 0x00, 0x0a, 0xf4, 
    0x0e, 0xc0, 0x00, 0x0c, 0xd1, 
    0x0c, 0xd1, 0x00, 0x3f, 0xc0, 
    0x07, 0xf4, 0x00, 0x4f, 0x70, 
    0x04, 0xf7, 0x00, 0xaf, 0x20, 
    0x00, 0xec, 0x00, 0xcd, 0x10, 
    0x00, 0xad, 0x13, 0xf9, 0x00, 
    0x00, 0x7f, 0x44, 0xf4, 0x00, 
    0x00, 0x3f, 0x7a, 0xf2, 0x00, 
    0x00, 0x0e, 0xcc, 0xc0, 0x00, 
    0x00, 0x0a, 0xff, 0x90, 0x00, 
    0x00, 0x04, 0xff, 0x40, 0x00, 
    0x00, 0x03, 0xfd, 0x10, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: W (codepoint 0057)
// Size: 14 x 24
// ∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ▓█∙∙∙∙▓█∙∙∙∙██
    // ▒█░∙∙∙▓█∙∙∙░█▓
    // ░█▒∙∙░██░∙∙░█▒
    // ∙█▓∙∙░██▓∙∙▒█░
    // ∙▓█∙∙▒█▓▓∙∙▓█∙
    // ∙▓█∙∙▓▓▒█∙∙▓█∙
    // ∙▒█░∙█▓░█∙∙█▓∙
    // ∙░█▒░█▒░█▒░█▒∙
    // ∙∙█▓░█∙∙▓▓░█░∙
    // ∙∙▓▓▒█∙∙▓▓▒█∙∙
    // ∙∙▓██▓∙∙▒█▓█∙∙
    // ∙∙▒██▓∙∙░██▓∙∙
    // ∙∙░██░∙∙░██▒∙∙
    // ∙∙∙██∙∙∙∙▓█░∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 168>
    image_data_Numbers_L_0x0057 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x23, 0x00, 0x00, 0x01, 0x00, 0x00, 0x23, 
    0xaf, 0x20, 0x00, 0xad, 0x10, 0x00, 0xed, 
    0x7f, 0x40, 0x00, 0xcf, 0x20, 0x03, 0xf9, 
    0x4f, 0x70, 0x03, 0xff, 0x40, 0x04, 0xf7, 
    0x0e, 0xc0, 0x04, 0xff, 0x90, 0x07, 0xf4, 
    0x0c, 0xd1, 0x07, 0xfc, 0xc0, 0x0a, 0xf2, 
    0x0a, 0xf2, 0x0a, 0xc7, 0xd1, 0x0c, 0xd1, 
    0x07, 0xf4, 0x0e, 0x94, 0xf2, 0x0e, 0x90, 
    0x04, 0xf7, 0x3f, 0x73, 0xf7, 0x3f, 0x70, 
    0x00, 0xe9, 0x4f, 0x20, 0xc9, 0x4f, 0x40, 
    0x00, 0xcc, 0x7d, 0x10, 0xac, 0x7f, 0x20, 
    0x00, 0xae, 0xdc, 0x00, 0x7e, 0xcd, 0x10, 
    0x00, 0x7f, 0xf9, 0x00, 0x4f, 0xf9, 0x00, 
    0x00, 0x4f, 0xf4, 0x00, 0x3f, 0xf7, 0x00, 
    0x00, 0x0e, 0xf2, 0x00, 0x0c, 0xf4, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: k (codepoint 006b)
// Size: 9 x 24
// ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙▓█∙∙∙∙∙∙
    // ∙▓█∙∙∙∙∙∙
    // ∙▓█∙∙∙∙∙∙
    // ∙▓█∙∙∙∙∙∙
    // ∙▓█∙∙∙░█▓
    // ∙▓█∙∙░█▓∙
    // ∙▓█∙∙▓█∙∙
    // ∙▓█∙▓█░∙∙
    // ∙▓█▒██▒∙∙
    // ∙▓██▓▓█∙∙
    // ∙▓██∙░█▓∙
    // ∙▓█∙∙∙▓█∙
    // ∙▓█∙∙∙░█▓
    // ∙▓█∙∙∙∙▓█
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x006b GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x30, 0x00, 0x00, 0x00, 
    0x0a, 0xf2, 0x00, 0x00, 0x00, 
    0x0a, 0xf2, 0x00, 0x00, 0x00, 
    0x0a, 0xf2, 0x00, 0x00, 0x00, 
    0x0a, 0xf2, 0x00, 0x02, 0x30, 
    0x0a, 0xf2, 0x00, 0x4f, 0x90, 
    0x0a, 0xf2, 0x03, 0xfc, 0x00, 
    0x0a, 0xf2, 0x0c, 0xd1, 0x00, 
    0x0a, 0xf2, 0xaf, 0x40, 0x00, 
    0x0a, 0xf7, 0xff, 0x70, 0x00, 
    0x0a, 0xff, 0xac, 0xd1, 0x00, 
    0x0a, 0xfd, 0x14, 0xf9, 0x00, 
    0x0a, 0xf2, 0x00, 0xcf, 0x20, 
    0x0a, 0xf2, 0x00, 0x4f, 0x90, 
    0x0a, 0xf2, 0x00, 0x0a, 0xf0, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: m (codepoint 006d)
// Size: 15 x 24
// ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙░∙∙∙∙░∙∙∙∙
    // ∙▓█▓███▓░███▓∙∙
    // ∙▓██░░███▒░██▒∙
    // ∙▓█∙∙∙▒█▒∙∙░█▓∙
    // ∙▓█∙∙∙░█▒∙∙░█▓∙
    // ∙▓█∙∙∙░█▒∙∙░█▓∙
    // ∙▓█∙∙∙░█▒∙∙░█▓∙
    // ∙▓█∙∙∙░█▒∙∙░█▓∙
    // ∙▓█∙∙∙░█▒∙∙░█▓∙
    // ∙▓█∙∙∙░█▒∙∙░█▓∙
    // ∙▓█∙∙∙░█▒∙∙░█▓∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 192>
    image_data_Numbers_L_0x006d GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x30, 0x03, 0x10, 0x00, 0x33, 0x00, 0x00, 
    0x0a, 0xf9, 0xff, 0xf9, 0x6f, 0xff, 0xb0, 0x00, 
    0x0a, 0xfd, 0x46, 0xff, 0xe6, 0x4d, 0xf7, 0x00, 
    0x0a, 0xf2, 0x00, 0x7f, 0x70, 0x03, 0xf9, 0x00, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 0x03, 0xf9, 0x00, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 0x03, 0xf9, 0x00, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 0x03, 0xf9, 0x00, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 0x03, 0xf9, 0x00, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 0x03, 0xf9, 0x00, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 0x03, 0xf9, 0x00, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 0x03, 0xf9, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: s (codepoint 0073)
// Size: 8 x 24
// ∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙
    // ∙∙∙░░∙∙∙
    // ∙░█████∙
    // ∙██░░▓█▓
    // ░█▓∙∙∙░∙
    // ∙██∙∙∙∙∙
    // ∙▒████▒∙
    // ∙∙∙▒▓██▓
    // ∙∙∙∙∙∙▓█
    // ∙▓░∙∙∙▓█
    // ░██▒▒▓█▓
    // ∙░████▓∙
    // ∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 96>
    image_data_Numbers_L_0x0073 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x03, 0x31, 0x00, 
    0x04, 0xff, 0xff, 0xd1, 
    0x0e, 0xf4, 0x3a, 0xf9, 
    0x3f, 0x90, 0x00, 0x30, 
    0x0e, 0xd1, 0x00, 0x00, 
    0x07, 0xff, 0xfd, 0x60, 
    0x00, 0x28, 0xbf, 0xf9, 
    0x00, 0x00, 0x00, 0xcd, 
    0x2a, 0x40, 0x00, 0xad, 
    0x3f, 0xf7, 0x6a, 0xfc, 
    0x04, 0xef, 0xff, 0xb1, 
    0x00, 0x00, 0x30, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: ° (codepoint 00b0)
// Size: 6 x 24
// ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙░░∙∙
    // ∙▓███░
    // ░█░∙▓▓
    // ░█∙∙▒█
    // ░█∙∙▓▓
    // ∙████▒
    // ∙∙░▒░∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
    // ∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 72>
    image_data_Numbers_L_0x00b0 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x45, 0x10, 
    0x0c, 0xff, 0xf4, 
    0x4f, 0x40, 0xac, 
    0x4d, 0x10, 0x7d, 
    0x4f, 0x20, 0xac, 
    0x0e, 0xfe, 0xf7, 
    0x00, 0x56, 0x40, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00
}};

//-----------------------
// Character: µ (codepoint 00b5)
// Size: 10 x 24
// ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙░∙∙
    // ∙▓█∙∙∙░█▒∙
    // ∙▓█∙∙∙░█▒∙
    // ∙▓█∙∙∙░█▒∙
    // ∙▓█∙∙∙░█▒∙
    // ∙▓█∙∙∙░█▒∙
    // ∙▓█∙∙∙░█▒∙
    // ∙▓█∙∙∙░█▒∙
    // ∙▓█░∙∙░█▒∙
    // ∙▓██▒▒███▒
    // ∙▓████▓▒██
    // ∙▓█∙∙∙∙∙∙∙
    // ∙▓█∙∙∙∙∙∙∙
    // ∙▓█∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 120>
    image_data_Numbers_L_0x00b5 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x30, 0x00, 0x03, 0x00, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 
    0x0a, 0xf2, 0x00, 0x4f, 0x70, 
    0x0a, 0xf4, 0x00, 0x4f, 0x70, 
    0x0a, 0xfe, 0x88, 0xff, 0xe9, 
    0x0a, 0xfe, 0xff, 0x97, 0xfd, 
    0x0a, 0xf2, 0x00, 0x00, 0x00, 
    0x0a, 0xf2, 0x00, 0x00, 0x00, 
    0x0a, 0xd2, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: Ω (codepoint 03a9)
// Size: 11 x 24
// ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙░▒░∙∙∙∙
    // ∙∙░█████▒∙∙
    // ∙░██▒░▒██░∙
    // ∙▓█░∙∙∙░█▓∙
    // ∙▓█∙∙∙∙∙█▓∙
    // ∙▓█∙∙∙∙∙█▓∙
    // ∙▓█∙∙∙∙∙█▓∙
    // ∙▓█∙∙∙∙∙█▓∙
    // ∙▓█∙∙∙∙∙█▓∙
    // ∙▓█∙∙∙∙∙█▓∙
    // ∙▓█∙∙∙∙∙█▓∙
    // ∙▓█∙∙∙∙∙█▓∙
    // ∙░█▒∙∙∙░█▒∙
    // ∙▒██▓∙▒██▒∙
    // ∙▓██▓∙▓██▓∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 144>
    image_data_Numbers_L_0x03a9 GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x46, 0x30, 0x00, 0x00, 
    0x00, 0x4f, 0xff, 0xff, 0x70, 0x00, 
    0x03, 0xff, 0x63, 0x8f, 0xf4, 0x00, 
    0x0a, 0xf4, 0x00, 0x03, 0xf9, 0x00, 
    0x0c, 0xf2, 0x00, 0x00, 0xec, 0x00, 
    0x0c, 0xd1, 0x00, 0x00, 0xec, 0x00, 
    0x0c, 0xd1, 0x00, 0x00, 0xec, 0x00, 
    0x0c, 0xd1, 0x00, 0x00, 0xec, 0x00, 
    0x0c, 0xd1, 0x00, 0x00, 0xec, 0x00, 
    0x0c, 0xd1, 0x00, 0x00, 0xec, 0x00, 
    0x0c, 0xd1, 0x00, 0x00, 0xec, 0x00, 
    0x0a, 0xf2, 0x00, 0x00, 0xec, 0x00, 
    0x04, 0xf7, 0x00, 0x04, 0xf7, 0x00, 
    0x08, 0xff, 0x90, 0x7f, 0xe8, 0x00, 
    0x0c, 0xff, 0xc0, 0xaf, 0xfc, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}};

//-----------------------
// Character: ※ (codepoint 203b)
// Size: 20 x 24
// ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙▓▒∙∙░██░∙∙░▓∙∙∙∙
    // ∙∙∙∙▓█▒∙░██░∙░██∙∙∙∙
    // ∙∙∙∙∙▓█▒░██░░██∙∙∙∙∙
    // ∙∙∙∙∙∙██░∙∙░██∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙██░░██∙∙∙∙∙∙∙
    // ∙∙∙░██░∙████∙░██░∙∙∙
    // ∙∙∙░██░∙░██░∙░██░∙∙∙
    // ∙∙∙░██░∙████∙░██░∙∙∙
    // ∙∙∙∙∙∙∙██░░██∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙██░∙∙░██∙∙∙∙∙∙
    // ∙∙∙∙∙▓█▒░██░░██∙∙∙∙∙
    // ∙∙∙∙▓█▒∙░██░∙░██∙∙∙∙
    // ∙∙∙∙▓▒∙∙░██░∙∙░▓∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
//-----------------------
static const etl::array<const uint8_t, 240>
    image_data_Numbers_L_0x203b GLYPH_STORAGE {{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xa7, 0x00, 0x3f, 0xf4, 0x00, 0x4b, 0x00, 0x00, 
    0x00, 0x00, 0xcf, 0x70, 0x3f, 0xf4, 0x04, 0xfd, 0x10, 0x00, 
    0x00, 0x00, 0x0c, 0xf7, 0x3f, 0xf4, 0x3f, 0xd1, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xdf, 0x40, 0x03, 0xfe, 0x20, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0xf4, 0x3f, 0xf2, 0x00, 0x00, 0x00, 
    0x00, 0x03, 0xff, 0x40, 0xef, 0xff, 0x23, 0xff, 0x40, 0x00, 
    0x00, 0x03, 0xff, 0x40, 0x3f, 0xf4, 0x03, 0xff, 0x40, 0x00, 
    0x00, 0x03, 0xff, 0x40, 0xef, 0xff, 0x23, 0xff, 0x40, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0xf4, 0x3f, 0xf2, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xdf, 0x40, 0x03, 0xfe, 0x20, 0x00, 0x00, 
    0x00, 0x00, 0x0c, 0xf7, 0x3f, 0xf4, 0x3f, 0xd1, 0x00, 0x00, 
    0x00, 0x00, 0xcf, 0x70, 0x3f, 0xf4, 0x04, 0xfd, 0x10, 0x00, 
    0x00, 0x00, 0xa7, 0x00, 0x3f, 0xf4, 0x00, 0x4b, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}};


///////////////////////////////////////////////////////////////////////////////////////////////////
// Character definitions
///////////////////////////////////////////////////////////////////////////////////////////////////
static const etl::array<Gfx::Font::Character, 26> Numbers_L_Chars CHARDEF_STORAGE{{

    // character: ' '
    {
        .codepoint = 0x0020,
        .glyph = {
            .data = image_data_Numbers_L_0x0020,
            .size = {
                .width = 5,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '%'
    {
        .codepoint = 0x0025,
        .glyph = {
            .data = image_data_Numbers_L_0x0025,
            .size = {
                .width = 13,
                .height = 24
            },
            .block = 8
        }
    },

    // character: ','
    {
        .codepoint = 0x002c,
        .glyph = {
            .data = image_data_Numbers_L_0x002c,
            .size = {
                .width = 4,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '.'
    {
        .codepoint = 0x002e,
        .glyph = {
            .data = image_data_Numbers_L_0x002e,
            .size = {
                .width = 4,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '0'
    {
        .codepoint = 0x0030,
        .glyph = {
            .data = image_data_Numbers_L_0x0030,
            .size = {
                .width = 10,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '1'
    {
        .codepoint = 0x0031,
        .glyph = {
            .data = image_data_Numbers_L_0x0031,
            .size = {
                .width = 6,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '2'
    {
        .codepoint = 0x0032,
        .glyph = {
            .data = image_data_Numbers_L_0x0032,
            .size = {
                .width = 9,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '3'
    {
        .codepoint = 0x0033,
        .glyph = {
            .data = image_data_Numbers_L_0x0033,
            .size = {
                .width = 9,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '4'
    {
        .codepoint = 0x0034,
        .glyph = {
            .data = image_data_Numbers_L_0x0034,
            .size = {
                .width = 10,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '5'
    {
        .codepoint = 0x0035,
        .glyph = {
            .data = image_data_Numbers_L_0x0035,
            .size = {
                .width = 10,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '6'
    {
        .codepoint = 0x0036,
        .glyph = {
            .data = image_data_Numbers_L_0x0036,
            .size = {
                .width = 9,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '7'
    {
        .codepoint = 0x0037,
        .glyph = {
            .data = image_data_Numbers_L_0x0037,
            .size = {
                .width = 9,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '8'
    {
        .codepoint = 0x0038,
        .glyph = {
            .data = image_data_Numbers_L_0x0038,
            .size = {
                .width = 10,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '9'
    {
        .codepoint = 0x0039,
        .glyph = {
            .data = image_data_Numbers_L_0x0039,
            .size = {
                .width = 9,
                .height = 24
            },
            .block = 8
        }
    },

    // character: 'A'
    {
        .codepoint = 0x0041,
        .glyph = {
            .data = image_data_Numbers_L_0x0041,
            .size = {
                .width = 11,
                .height = 24
            },
            .block = 8
        }
    },

    // character: 'C'
    {
        .codepoint = 0x0043,
        .glyph = {
            .data = image_data_Numbers_L_0x0043,
            .size = {
                .width = 10,
                .height = 24
            },
            .block = 8
        }
    },

    // character: 'M'
    {
        .codepoint = 0x004d,
        .glyph = {
            .data = image_data_Numbers_L_0x004d,
            .size = {
                .width = 13,
                .height = 24
            },
            .block = 8
        }
    },

    // character: 'V'
    {
        .codepoint = 0x0056,
        .glyph = {
            .data = image_data_Numbers_L_0x0056,
            .size = {
                .width = 10,
                .height = 24
            },
            .block = 8
        }
    },

    // character: 'W'
    {
        .codepoint = 0x0057,
        .glyph = {
            .data = image_data_Numbers_L_0x0057,
            .size = {
                .width = 14,
                .height = 24
            },
            .block = 8
        }
    },

    // character: 'k'
    {
        .codepoint = 0x006b,
        .glyph = {
            .data = image_data_Numbers_L_0x006b,
            .size = {
                .width = 9,
                .height = 24
            },
            .block = 8
        }
    },

    // character: 'm'
    {
        .codepoint = 0x006d,
        .glyph = {
            .data = image_data_Numbers_L_0x006d,
            .size = {
                .width = 15,
                .height = 24
            },
            .block = 8
        }
    },

    // character: 's'
    {
        .codepoint = 0x0073,
        .glyph = {
            .data = image_data_Numbers_L_0x0073,
            .size = {
                .width = 8,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '°'
    {
        .codepoint = 0x00b0,
        .glyph = {
            .data = image_data_Numbers_L_0x00b0,
            .size = {
                .width = 6,
                .height = 24
            },
            .block = 8
        }
    },

    // character: 'µ'
    {
        .codepoint = 0x00b5,
        .glyph = {
            .data = image_data_Numbers_L_0x00b5,
            .size = {
                .width = 10,
                .height = 24
            },
            .block = 8
        }
    },

    // character: 'Ω'
    {
        .codepoint = 0x03a9,
        .glyph = {
            .data = image_data_Numbers_L_0x03a9,
            .size = {
                .width = 11,
                .height = 24
            },
            .block = 8
        }
    },

    // character: '※'
    {
        .codepoint = 0x203b,
        .glyph = {
            .data = image_data_Numbers_L_0x203b,
            .size = {
                .width = 20,
                .height = 24
            },
            .block = 8
        }
    }

}};

///////////////////////////////////////////////////////////////////////////////////////////////////
// Font definition
///////////////////////////////////////////////////////////////////////////////////////////////////

const Gfx::Font Gfx::Font::gNumbers_L{
    .name = "Numbers_L",
    // total of 26 characters
    .characters = Numbers_L_Chars,
    // font metrics
    .fontSize = 20,
    .lineHeight = 24,
    // ascent: 53, descent 11
};

